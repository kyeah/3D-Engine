/* Generated By:JavaCC: Do not edit this line. MdlParserTokenManager.java */
package parser;
import java.util.*;
import parseTables.*;

/** Token Manager. */
public class MdlParserTokenManager implements MdlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffffc0L) != 0L)
         {
            jjmatchedKind = 36;
            return 3;
         }
         return -1;
      case 1:
         if ((active0 & 0x1ffffffc0L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active0 & 0x1fff97f80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return 3;
         }
         if ((active0 & 0x68040L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active0 & 0x6bfd2980L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return 3;
         }
         if ((active0 & 0x194005600L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active0 & 0x5f5d0880L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 3;
         }
         if ((active0 & 0x20a02100L) != 0L)
            return 3;
         return -1;
      case 5:
         if ((active0 & 0x175d0000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 3;
         }
         if ((active0 & 0x48000880L) != 0L)
            return 3;
         return -1;
      case 6:
         if ((active0 & 0x160d0000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 3;
         }
         if ((active0 & 0x1500000L) != 0L)
            return 3;
         return -1;
      case 7:
         if ((active0 & 0x16080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
            return 3;
         }
         if ((active0 & 0x50000L) != 0L)
            return 3;
         return -1;
      case 8:
         if ((active0 & 0x14080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
            return 3;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 3;
         return -1;
      case 9:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
            return 3;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 3;
         return -1;
      case 10:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 10;
            return 3;
         }
         return -1;
      case 11:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 11;
            return 3;
         }
         return -1;
      case 12:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 12;
            return 3;
         }
         return -1;
      case 13:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 13;
            return 3;
         }
         return -1;
      case 14:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 14;
            return 3;
         }
         return -1;
      case 15:
         if ((active0 & 0x4080000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 15;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 38);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 58:
         return jjStopAtPos(0, 37);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10040L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40200000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800200L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x114162080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20000100L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x19c010000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0400L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00200L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2209940L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40102000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080200L);
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 3);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x414400L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40800L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x114001000L);
      case 120:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200800L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 3);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 3);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3c090080L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 3);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x14000000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x41000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x50000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080080L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 3);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 3);
         return jjMoveStringLiteralDfa6_0(active0, 0x2490000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 3);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 3);
         break;
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 103:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 3);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 3);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 3);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x14000000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 3);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x4080000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(16, 26, 3);
         break;
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 19, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 46)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(3);
                  }
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 45)
                     jjCheckNAddStates(4, 7);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(0, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 6, 7, 9, 5, 6, 0, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\142\157\170", "\163\160\150\145\162\145", 
"\164\157\162\165\163", "\154\151\156\145", "\155\145\163\150", "\162\157\164\141\164\145", 
"\155\157\166\145", "\163\143\141\154\145", "\160\165\163\150", "\160\157\160", 
"\142\141\163\145\156\141\155\145", "\163\145\164", "\163\145\164\153\156\157\142\163", 
"\147\145\156\145\162\141\164\145\137\162\141\171\146\151\154\145\163", "\163\150\141\144\151\156\147", "\146\157\143\141\154", 
"\144\151\163\160\154\141\171", "\154\151\147\150\164", "\141\155\142\151\145\156\164", 
"\143\157\156\163\164\141\156\164\163", "\163\141\166\145\137\143\157\157\162\144\137\163\171\163\164\145\155", 
"\143\141\155\145\162\141", "\163\141\166\145\137\153\156\157\142\163", "\164\167\145\145\156", 
"\146\162\141\155\145\163", "\166\141\162\171", "\163\141\166\145", null, null, null, null, "\72", "\12", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffc1L, 
};
static final long[] jjtoSkip = {
   0x16L, 
};
static final long[] jjtoSpecial = {
   0x10L, 
};
static final long[] jjtoMore = {
   0x28L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public MdlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MdlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 5)
         {
            jjmatchedKind = 5;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
